namespace ca.mcgill.ecse223.resto.model;

use RestoAppPersistence.ump;
use TableStateMachine.ump;

class RestoApp {
   1 <@>- * Reservation reservations; // sorted by date and time
   1 <@>- * Table tables;
   0..1 -> * Table currentTables; // subsets tables
   1 <@>- * Order orders;
   0..1 -> * Order currentOrders; // subsets orders
   1 <@>- 1 Menu menu;   
   1 <@>- * PricedMenuItem pricedMenuItems;
   1 <@>- * Bill bills;
}

class Reservation {
   Date dateTime;
   Integer numberInParty;
   contactName;
   contactEmailAddress;
   contactPhoneNumber;
   autounique reservationNumber;
   * reservations -- 1..* Table tables; // only from currentTables
}

class Table {
   unique Integer number;
   Integer x;
   Integer y;
   Integer width;
   Integer length;
   1 <@>- 1..* Seat seats;
   0..1 -> * Seat currentSeats; // subsets seats
   
   public boolean contains(int x, int y){
	   boolean result = false;
	   int x_leftBound = this.getX();
	   int x_rightBound = x_leftBound+this.width;
	   int y_topBound = this.getY();
	   int y_bottomBound = this.getY()+this.length;
	   if((x_leftBound <= x) && (x <= x_rightBound) && (y_topBound <= y) && (y <= y_bottomBound)) {
		  result = true;
	   }
	   return result;
   }
   
   public boolean doesOverlap(int x, int y, int width, int length) {
	//Any rectangle can be represented by two coordinates, top left and bottom right
	
	//Coordinate of two points of this rectangle
	int Ax1 = this.x;
	int Ay1 = this.y;
	int Ax2 = this.x + this.width;
	int Ay2 = this.y + this.length;

	//Coordinate of two points of rectangle from arguments
	int Bx1 = x;
	int By1 = y;
	int Bx2 = x + width;
	int By2 = y + length;

	

	if ((Ax1 < Bx2) && (Ax2 > Bx1) && (Ay1 < By2) && (Ay2 > By1))
		{
		return true;
		}
	return false;
	
	}
}

class Seat {
}

class Order {
   Date dateTime;
   autounique number;
   * orders -- 1..* Table tables; // only from currentTables for currentOrders
   1 <@>- * OrderItem orderItems;
}

class OrderItem {
   Integer quantity;
   * orderItems -- 1 PricedMenuItem pricedMenuItem; // only from MenuItem.currentPricedMenuItem for currentOrders
   * orderItems -- 1..* Seat seats; // only from order.tables.seats
}

class Menu {   
   1 <@>- * MenuItem menuItems;
}

class MenuItem {
   unique name;
   enum ItemCategory { Appetizer, Main, Dessert, AlcoholicBeverage, NonAlcoholicBeverage }
   lazy ItemCategory itemCategory;
   1 -- 1..* PricedMenuItem pricedMenuItems;
   0..1 -> 0..1 PricedMenuItem currentPricedMenuItem; // subsets priced menus items
}

class PricedMenuItem {
   Double price;
}

class Bill {
   * bills -- 1 Order order; // order.bills.issuedForSeats = order.orderItems.seats
   * bills -- 1..* Seat issuedForSeats; // only from order.orderItems.seats;
}
